#+title: Emacs configuration overview
#+author: arttusii

This document explains the structure, behavior, and common workflows of this ~.emacs.d~. It’s designed to be simple, predictable, and easy to extend.

* Quick start
- Start Emacs as usual. On startup you’ll see the Welcome view.
- Global keys you’ll likely use first:
  - ~C-c h~: Open the Welcome view
  - ~C-c c~: Capture (task, note, link, journal)
  - ~C-c a~: Agenda
  - ~C-c l~: Store link
  - ~C-c j~: Capture a journal entry for today

* Layout
#+begin_example
~/.emacs.d/
  early-init.el          ; startup/UI polish (applies before init.el)
  init.el                ; entry point: loads shared vars + modules
  custom.el              ; Customize output only
  README.org             ; this file
  lisp/
    core-init.el         ; backups/autosaves and editing defaults
    org-basic.el         ; Org defaults: agenda files, TODOs, logging, refiling, etc.
    org-capture-config.el; Capture inbox and templates
    org-agenda-config.el ; Agenda polish and custom commands
    reading-tracker.el   ; Reading dashboard + helpers
    journal.el           ; DateTree journal + capture helpers
    welcome.el           ; Welcome / keys page
#+end_example

* Startup flow
1. ~early-init.el~ runs first (before UI shows):
   - Faster startup (GC, IO), minimal UI, initial frame size
2. ~init.el~ sets ~custom-file~, ~org-directory~, ~load-path~, then loads modules
3. Modules initialize Org defaults, capture, agenda, welcome, reading, journal
4. Welcome buffer opens after startup

* Core behavior
** Backups and autosaves
- All backups and auto-saves are stored under ~~/.emacs.d/var/~ (via ~lisp/core-init.el~)
- Versioned backups enabled; lockfiles disabled

** Exit behavior
- Safe-exit prompts are disabled: quitting with ~C-x C-c~ exits immediately

** Fonts and window size
- Initial frame size is set in ~early-init.el~ (~width 140~, ~height 60~)
- Default font comes from ~custom.el~. To change size, update the ~default~ face ~:height~ there

* Org configuration
** Org root and files
- ~org-directory~ is defined centrally in ~init.el~ (default: ~~/org~)
- Ensured/used files:
  - ~tasks.org~ (created automatically with ~Inbox~)
  - ~inbox.org~ (created automatically for capture)
  - ~reading.org~ (created/maintained by reading tracker)
  - ~journal.org~ (DateTree; created on first use)
- Agenda sources are kept idempotent: modules add files without overwriting your existing ~org-agenda-files~

** TODOs, logging, priorities (in ~org-basic.el~)
- States: ~TODO → NEXT → DONE~ (Plus ~CANCELLED~)
- Fast TODO selection enabled; dependencies enforced
- ~org-log-done~ timestamps saved inside a drawer to avoid clutter
- Priorities: ~A~ (highest), ~B~, ~C~ (default)
- Archiving: to ~archive/%s::datetree/~ per file

** Capture (in ~org-capture-config.el~)
- Global: ~C-c c~
- Templates:
  - ~t~ Task → ~tasks.org/Inbox~ (includes Effort property)
  - ~n~ Note → ~inbox.org~
  - ~l~ Link → ~inbox.org~ (uses stored link ~C-c l~)
  - ~j~ Journal (today) → ~journal.org~ DateTree
- Stored links: ~C-c l~

** Agenda (in ~org-agenda-config.el~)
- Global: ~C-c a~
- Defaults: weekly span, compact blocks, aligned date headers, “next-repeat” display
- Sorting: ~habit-down time-up deadline-up priority-down~ for agenda; effort and priority for ~todo~
- Custom commands:
  - ~d~ Dashboard → week agenda + NEXT tasks + high-priority items

** Refiling
- Global: outline-path completion in a single prompt (e.g., ~file/Section/Subsection~)
- Targets:
  - All ~org-agenda-files~ up to level 9
  - ~journal.org~ day entries only (level 3) to keep DateTree consistent

** Reading tracker (in ~reading-tracker.el~)
- Maintains ~reading.org~ with a ~Dashboard~ block and a ~Books~ section
- Commands:
  - ~C-c r o~ open ~reading.org~
  - ~C-c r a~ add book, ~C-c r u~ update page, ~C-c r d~ delete book
  - ~C-c r R~ refresh dashboard, ~C-c r D~ set/clear deadline

** Journal (in ~journal.el~)
- ~C-c j~: Capture a journal entry into today’s DateTree
- Refiling into ~journal.org~ is restricted to day nodes only (level 3)

** Welcome (in ~welcome.el~)
- ~C-c h~: Open the Welcome/Keys page
- Shows key cheatsheet and a small reading status table

* Common workflows
** Add a task quickly
1. ~C-c c t~ → type task → ~C-c C-c~ to save
2. See it in agenda (~C-c a~) and in ~tasks.org/Inbox~

** Journal a note for today
1. ~C-c j~ → write → ~C-c C-c~ to save
2. Entry goes under today’s node in ~journal.org~

** Track a book
1. ~C-c r a~ → fill prompts (title, author, pages, optional deadline)
2. Update progress with ~C-c r u~
3. Refresh dashboard with ~C-c r R~

** Refile something
1. ~C-c C-w~ in any Org buffer
2. Choose target via single prompt path (includes ~journal.org~ days)

* Customization notes
- You can adjust agenda look-and-feel in ~lisp/org-agenda-config.el~
- Add new capture templates in ~lisp/org-capture-config.el~
- Add new feature modules under ~lisp/~ and ~require~ them from ~init.el~
- To change the default font, use ~M-x customize-face RET default RET~ (writes to ~custom.el~)
- To change the initial window size, edit ~width/height~ in ~early-init.el~

* Optional: autoloads for faster startup
- Add ~;;;###autoload~ cookies above interactive commands in feature files
- Generate autoloads once:
  #+begin_src emacs-lisp
  (require 'autoload)
  (update-directory-autoloads (expand-file-name "lisp" user-emacs-directory))
  #+end_src
- This creates ~lisp/loaddefs.el~; load it in ~init.el~ if present

* Troubleshooting
- “End of file during parsing” → usually an unbalanced parenthesis; ~M-x check-parens~ in the buffer
- Capture templates missing → evaluate ~org-capture-config.el~ (~M-x eval-buffer~) or restart Emacs
- Journal refile doesn’t offer day nodes → ensure ~journal.el~ is loaded (use ~C-c j~ once)
- Exit prompts show up → verify ~confirm-kill-emacs~ and ~confirm-kill-processes~ are ~nil~ in ~lisp/core-init.el~
- Agenda key “J” not recognized → this config intentionally removed agenda-specific “J”; use ~C-c j~ anywhere

* License
Personal configuration; adapt freely.


